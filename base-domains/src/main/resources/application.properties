spring.application.name=base

server.port=8084



#spring boot admin server url
#http://localhost:8038
spring.boot.admin.client.url=http://localhost:8084
spring.boot.admin.client.username=admin 
spring.boot.admin.client.password=adminpassword

# Actuator Configuration
management.endpoints.web.exposure.include=*
management.endpoints.web.base-path=/actuator
management.endpoint.health.show-details=always
management.endpoint.health.show-compgitonents=always

# Enable Disk Space Health Indicator (optional customization)
management.health.diskspace.enabled=true
management.health.diskspace.threshold=1000000000

# Enable Spring Boot Admin UI
spring.boot.admin.ui.enabled=true
spring.boot.admin.security.enabled=false

spring.datasource.url=jdbc:postgresql://localhost:5432/migration
spring.datasource.username=postgres
spring.datasource.password=Shakti
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


#In Spring Boot, connection pooling manages a set of reusable database connections, reducing the \
#  overhead of establishing a new connection for each database operation. This approach enhances \
#  application performance by reusing existing connections, thereby minimizing the time and resources\
#   required for database interactions. Spring Boot often utilizes HikariCP, a high-performance connection \
#  pool, to efficiently handle these connections.
#GEEKSFORGEEKS


#it is espically for multithread application for multiple connections:

# HikariCP Connection Pool settings

#explanation of each HikariCP connection pool setting:

#spring.datasource.hikari.pool-name=HikariCP: Sets the name of the connection pool for identification purposes.
#
#spring.datasource.hikari.maximum-pool-size=20: Defines the maximum number of connections that the pool can hold.
#
#spring.datasource.hikari.minimum-idle=5: Specifies the minimum number of idle connections to maintain in the pool.
#
#spring.datasource.hikari.idle-timeout=30000: Sets the maximum amount of time (in milliseconds) that a connection can remain idle before being removed from the pool.
#
#spring.datasource.hikari.max-lifetime=1800000: Determines the maximum lifetime (in milliseconds) of a connection in the pool before it is closed and replaced.
#
#spring.datasource.hikari.connection-timeout=30000: Specifies the maximum time (in milliseconds) that the application will wait to obtain a connection from the pool before throwing an exception.
#
#spring.datasource.hikari.validation-timeout=5000: Sets the maximum time (in milliseconds) that the pool will wait for a connection to be validated as alive.
#
#spring.datasource.hikari.leak-detection-threshold=15000: Defines the amount of time (in milliseconds) that a connection can be borrowed from the pool before a warning is logged, indicating a potential connection leak.
spring.datasource.hikari.pool-name=HikariCP
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.leak-detection-threshold=15000

#In HikariCP, the spring.datasource.hikari.auto-commit=true setting determines the default
#   auto-commit behavior for database connections retrieved from the connection pool.
spring.datasource.hikari.auto-commit=true
#spring.jpa.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update


#to track statistics of query running
spring.jpa.properties.hibernate.generate_statistics=true
logging.level.org.hibernate=debug


# Enable second-level cache
spring.jpa.properties.hibernate.cache.use_second_level_cache=true

# Specify the cache provider and region factory
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory

# Enable query cache (optional, if you're caching queries)
spring.jpa.properties.hibernate.cache.use_query_cache=true


#swagger APIS
springfox.documentation.swagger-ui.enabled=true

jwt.secret=357638792F423F4428472B4B6250655368566D597133743677397A2443264629
jwt.expiration=172800000  

jwt.refresh-token=
jwt.refresh-token-expiration=1209600000


#SELECT * FROM flyway_schema_h
# istory;


##migration
## Enable or disable Flyway
#spring.flyway.enabled=true
#
## Locations of the migration scripts
#spring.flyway.locations=classpath:db/migration
#
## Baseline on migrate (useful for existing databases)
#spring.flyway.baseline-on-migrate=true
#spring.flyway.validate-on-migrate=true

#loog
logging.level.com.nextstep.multiauhtnticate.controller=trace


#logging.level.org.springframework=DEBUG
#logging.level.org.springframework.data=DEBUG
